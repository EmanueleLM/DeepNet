# -*- coding: utf-8 -*-
"""
Created on Sun Oct  1 13:37:42 2017

@author: Emanuele

Random data generator and functions that clean it, randomize it, normalize it etc.
The format of the data is assumes as (n, m, 1) where n is the number of samples
    m is the number of dimensions.
"""

import numpy as np

# function that generates a random set of n data, m-dimensional
# takes as input
#   n, the number of samples
#   m, the dimension of each sample
# returns
#   a m*n matrix
def random_data(n, m):
    # train set, except the target feature, generated by a random gaussian 
    #   function with unitary mean and null variance
    X = np.random.rand(m, n, 1); 
    return X;

# function that generates a random set of n data, m-dimensional
# takes as input
#   n, the number of samples
#   m, the dimension of each sample
#   min_value, the minimum integer from which we sample (set to zero)
#   max_value, the maximum value from which we sample (set to 100) 
# returns
#   a m*n matrix
def random_int_data(n, m, min_value=0, max_value=100):
    X = np.random.randint(min_value, max_value, (m, n, 1));
    return X;

# function that generates a random binary set of n data, m-dimensional
# takes as input
#   n, the number of samples
#   m, the dimension of each sample
# returns
#   a m*n matrix
def random_binary_data(n, m):
    X = np.random.randint(0, 2, [m,n,1]);
    return X;

# function that normalize the data
# takes as input
#   X, the input matrix, whose shape is (m, n, 1)
# returns
# normalized X, with the same shape
def normalize_data(X):
    for i in range(X.shape[0]):
        X[:,i] = (X[:,i]-np.mean(X[:,i]))/np.std(X[:,i]); # normalize input and output
    return X;